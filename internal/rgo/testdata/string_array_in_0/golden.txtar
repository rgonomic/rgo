-- DESCRIPTION --
Package: string_array_in_0
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0
Authors@R:
    person(given   = "First",
           family  = "Last",
           role    = c("aut", "cre"),
           email   = "first.last@example.com",
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: What the package does (one paragraph).
License: See LICENSE directory
Encoding: UTF-8
LazyData: true
-- NAMESPACE --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

useDynLib(string_array_in_0)
export(test_0)
-- R/string_array_in_0.R --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

#' @useDynLib string_array_in_0

#' test_0
#'
#' Test0 does things with [[4]string] and returns [].
#' 
#' @param par0 is a character vector with 4 elements
#' @seelso <https://godoc.org/string_array_in_0#Test0>
#' @export
test_0 <- function(par0) {
	if (!is.character(par0)) {
		stop("Argument 'par0' must be of type 'character'.")
	}
	if (length(par0) != 4) {
		stop("Argument 'par0' must have 4 elements.")
	}
	.Call("test_0", par0, PACKAGE = "string_array_in_0")
}
-- src/Makevars --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

.PHONY: all

CGO_CFLAGS = "$(ALL_CPPFLAGS)"
CGO_LDFLAGS = "$(PKG_LIBS) $(SHLIB_LIBADD) $(LIBR)"

all: go docs

docs:

go:
	rm -f *.h
	CGO_CFLAGS=$(CGO_CFLAGS) CGO_LDFLAGS=$(CGO_LDFLAGS) go build -o $(SHLIB) -buildmode=c-shared ./rgo
-- src/rgo/string_array_in_0.c --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

#include "_cgo_export.h"

void R_warning(char* s) {
	warning(s);
}

void R_error(char* s) {
	error(s);
}

// TODO(kortschak): Only emit these when needed:
// Needed for unpacking SEXP character.
GoString R_gostring(SEXP x, R_xlen_t i) {
	SEXP _s = STRING_ELT(x, i);
	GoString s = {(char*)CHAR(_s), LENGTH(_s)};
	return s;
}

// Needed for getting list elements by name.
int getListElementIndex(SEXP list, const char *str) {
	int index = -1;
	SEXP names = getAttrib(list, R_NamesSymbol);
	if (!isString(names)) {
		return index;
	}
	for (int i = 0; i < length(list); i++) {
		if (strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
			index = i;
			break;
		}
	}
	return index;
}

SEXP test_0(SEXP par0) {
	return Wrapped_Test0(par0);
}
-- src/rgo/string_array_in_0.go --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

package main

/*
#define USE_RINTERNALS
#include <R.h>
#include <Rinternals.h>
extern void R_error(char *s);

// TODO(kortschak): Only emit these when needed.
extern Rboolean Rf_isNull(SEXP s);
extern _GoString_ R_gostring(SEXP x, R_xlen_t i);
extern int getListElementIndex(SEXP list, const char *str);
*/
import "C"

import (
	"fmt"
	"unsafe"

	"string_array_in_0"
)

//export Wrapped_Test0
func Wrapped_Test0(_R_par0 C.SEXP) C.SEXP {
	defer func() {
		r := recover()
		if r != nil {
			err := C.CString(fmt.Sprint(r))
			C.R_error(err)
			C.free(unsafe.Pointer(err))
		}
	}()

	_p0 := unpackSEXP_types_Array__4_string(_R_par0)
	string_array_in_0.Test0(_p0)
	return C.R_NilValue
}


func unpackSEXP_types_Array__4_string(p C.SEXP) [4]string {
	var a [4]string
	copy(a[:], unpackSEXP_types_Slice___string(p))
	return a
}

func unpackSEXP_types_Slice___string(p C.SEXP) []string {
	if C.Rf_isNull(p) != 0 {
		return nil
	}
	n := C.Rf_xlength(p)
	r := make([]string, n)
	for i := range r {
		r[i] = string(C.R_gostring(p, C.R_xlen_t(i)))
	}
	return r
}

func main() {}
